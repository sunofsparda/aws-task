---
# AWSTemplateFormatVersion: "2010-09-09"
Description: "Create the stack (ELB/EC2) using Cloudformation (JSON and YAML)"

Resources:

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: "Name"
        Value: "vpc-1"

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internet-gateway.html
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: "Name"
        Value: "internet_gateway-1"

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
  VPCGatewayAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
  SubnetPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1a"
      Tags:
      - Key: "Name"
        Value: "subnet_private-1"

  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: "Name"
        Value: "subnet_public-1"

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "route_table_private-1"

  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "route_table_public-1"

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
  NAT:
    DependsOn: EIP
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId: !Ref SubnetPublic

  EIP:
    Type: 'AWS::EC2::EIP'

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
  RoutePrivate:
    Type: 'AWS::EC2::Route'
    DependsOn: NAT
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
      RouteTableId: !Ref RouteTablePrivate

  RoutePublic:
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - NAT
    - InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
  SubnetRouteTableAssociationPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate
      RouteTableId: !Ref RouteTablePrivate

  SubnetRouteTableAssociationPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  SecurityGroupBackend:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALLOW http and ssh to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      # SecurityGroupEgress:
      # - IpProtocol: tcp
      #   FromPort: '80'
      #   ToPort: '80'
      #   CidrIp: 0.0.0.0/0
      # - IpProtocol: tcp
      #   FromPort: '22'
      #   ToPort: '22'
      #   CidrIp: 0.0.0.0/0
      Tags:
      - Key: "Name"
        Value: "securitygroup_backend_http_ssh"

  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALLOW ssh to client host
      VpcId: !Ref VPC
      SecurityGroupIngress: # IMPROVE THIS. need some kind of list
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: '213.184.243.0/24'

      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: '217.21.56.0/24'

      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: '217.21.63.0/24'

      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: '213.184.231.0/24'

      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: '86.57.255.88/29'
      Tags:
      - Key: "Name"
        Value: "securitygroup_bastion_http_ssh"

  SecurityGroupELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALLOW access for EPAM-Minsk addresses only
      VpcId: !Ref VPC
      SecurityGroupIngress: # IMPROVE THIS. need some kind of list
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '213.184.243.0/24'

      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '217.21.56.0/24'

      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'        
        CidrIp: '217.21.63.0/24'

      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '213.184.231.0/24'

      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '86.57.255.88/29'
      Tags:
      - Key: "Name"
        Value: "securitygroup_elbaccess_epam_minsk"

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  Ec2Instance00:
    Type: "AWS::EC2::Instance"
    DependsOn: RoutePublic
    # Metadata: 
    #   AWS::CloudFormation::Init: 
    #     configSets:
    #       InstallAndRun:
    #         - Install
    #     Install:
    #       packages:
    #         yum:
    #           httpd: []
    #       services:
    #         sysvinit:
    #           httpd:
    #             enabled: 'true'
    #             ensureRunning: 'true'
    Properties: 
      ImageId: "ami-c58c1dd3"
      InstanceType: t2.micro
      KeyName: "aws_acherlyonok"
      NetworkInterfaces: 
        # - AssociatePublicIpAddress: "true"
        - DeviceIndex: "0"
          SubnetId: !Ref "SubnetPublic"
          GroupSet: 
            - Ref: "SecurityGroupBastion"
      UserData:
        Fn::Base64: !Sub |     # No more Fn::Join needed
          #!/bin/bash
          sudo yum -y update && sudo yum -y install httpd
          sudo service httpd start && sudo chkconfig httpd on
      Tags:
      - Key: "Name"
        Value: "instance-00"
  Ec2Instance01:
    Type: "AWS::EC2::Instance"
    DependsOn: RoutePrivate
    # Metadata: 
    #   AWS::CloudFormation::Init: 
    #     configSets:
    #       InstallAndRun:
    #         - Install
    #     Install:
    #       packages:
    #         yum:
    #           httpd: []
    #       services:
    #         sysvinit:
    #           httpd:
    #             enabled: 'true'
    #             ensureRunning: 'true'
    Properties: 
      ImageId: "ami-c58c1dd3"
      InstanceType: t2.micro
      KeyName: "aws_acherlyonok"
      NetworkInterfaces: 
        # - AssociatePublicIpAddress: "true"
        - DeviceIndex: "0"
          SubnetId: !Ref "SubnetPrivate"
          GroupSet: 
            - Ref: "SecurityGroupBackend"
      UserData:
        Fn::Base64: !Sub |     # No more Fn::Join needed
          #!/bin/bash
          sudo yum -y update && sudo yum -y install httpd
          sudo service httpd start && sudo chkconfig httpd on
      Tags:
      - Key: "Name"
        Value: "instance-01"

  Ec2Instance02:
    Type: "AWS::EC2::Instance"
    DependsOn: RoutePrivate
    # Metadata: 
    #   AWS::CloudFormation::Init: 
    #     configSets:
    #       InstallAndRun:
    #         - Install
    #     Install:
    #       packages:
    #         yum:
    #           httpd: []
    #       services:
    #         sysvinit:
    #           httpd:
    #             enabled: 'true'
    #             ensureRunning: 'true'
    Properties: 
      ImageId: "ami-c58c1dd3"
      InstanceType: t2.micro
      KeyName: "aws_acherlyonok"
      NetworkInterfaces: 
        # - AssociatePublicIpAddress: "true"
        - DeviceIndex: "0"
          SubnetId: !Ref "SubnetPrivate"
          GroupSet: 
            - Ref: "SecurityGroupBackend"
      UserData:
        Fn::Base64: !Sub |     # No more Fn::Join needed
          #!/bin/bash
          sudo yum -y update && sudo yum -y install httpd
          sudo service httpd start && sudo chkconfig httpd on
      Tags:
      - Key: "Name"
        Value: "instance-02"

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html
  ElasticLoadBalancer: # FIXME
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
      - Ref: SecurityGroupELB
      Subnets:
      - Ref: SubnetPublic
      Instances:
      - Ref: Ec2Instance01
      - Ref: Ec2Instance02
      # - Ref: Ec2Instance00
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
          # Ref: WebServerPort
        Protocol: TCP
        InstanceProtocol: TCP
        # Protocol: HTTP
        # InstanceProtocol: HTTP
      HealthCheck:
        Target: 'TCP:80'
          # Fn::Join:
          # - ''
          # - - 'HTTP:80/index.html'
          # # - - 'TCP:80'
          # # - - 'HTTP:80'
          #   # - Ref: WebServerPort
          #   # - "/"
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
